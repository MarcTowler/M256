/*
 * 
 */
package gui;

import competitionadmincore.CompetitionAdminCoord;
import competitionadmincore.Category;
import competitionadmincore.Member;
import competitionadmincore.Photo;
import java.text.ParseException;
import java.util.*;

/**
 * An object of this class provides a user interface for the competition system
 */
public class CompetitionAdminGUI extends javax.swing.JFrame
{

   /**
    * The coordinating object
    */
   private CompetitionAdminCoord competition;

   /**
    * Creates new CompetitionAdminGUI form and assigns coordinating object to competition
    */
   public CompetitionAdminGUI() throws ParseException
   {
      initComponents();
      competition = new CompetitionAdminCoord();
      displayMembers();
      displayCategories();
      resetOutcomeArea();
   }

   //Helper methods
   private void displayMembers()
   {
      Collection<Member> members = competition.getMembers();
      memberList1.setListData(members);
      memberList1.setSelectedIndex(0);
      memberList2.setListData(members);
      memberList2.setSelectedIndex(0);
   }

   private void displayCategories()
   {
      Collection<Category> categories = competition.getCategories();
      categoryList.setListData(categories);
      categoryList.setSelectedIndex(0);
   }

   private void resetOutcomeArea()
   {
      outcomeArea.setText("");
      titleField.setText("");
   }

   private void resetsummaryArea()
   {
      firstfield.setText("");
   }

   private void doRecordPhotograph()
   {
      String theTitle = titleField.getText();
      String outcomeText = "\nYour entry has not been recorded";

      if (memberList1.isSelectionEmpty() || categoryList.isSelectionEmpty())
      {
         outcomeText = "You must select a member and a category";
      }
      else
      {

         Member theMember = (Member) memberList1.getSelectedValue();
         Category theCategory = (Category) categoryList.getSelectedValue();

         if (competition.isInappropriateCategory(theMember, theCategory))
         {
            outcomeText = "You are a junior and this is an adult only category."
                  + outcomeText;
         }
         else if (competition.hasMaximumEntries(theMember, theCategory))
         {
            outcomeText = "You have already entered the maximum number of photographs in this category."
                  + outcomeText;
         }
         else if (competition.hasDuplicateTitle(theMember, theTitle))
         {
            outcomeText = "You have already entered a photograph with this title."
                  + outcomeText;
         }
         else if (competition.hasNoTitle(theTitle))
         {
            outcomeText = "You have not entered a title."
                  + outcomeText;
         }
         else
         {
            competition.recordPhoto(theMember, theCategory, theTitle);
            titleField.setText("");
            outcomeText = "Entry recorded. \nTitle " + "\"" + theTitle
                  + "\"\nPhotographer : " + theMember
                  + ". \nCategory: " + theCategory.getName();
            doListMembers();
            doSummaryField();
         }
      }
      outcomeArea.setText(outcomeText);
   }

   private void doListMembers()
   {
      if (memberList2.isSelectionEmpty())
      {
         firstfield.setText("No member has been selected");
      }
      else
      {
         Member theMember = (Member) memberList2.getSelectedValue();
         List<String> membersData = new ArrayList<String>();
         Map<Photo, Category> tempMap = competition.getPhotosAndCategories(
               theMember);
         for (Photo aPhoto : tempMap.keySet())
         {
            membersData.add(
                  aPhoto + " " + "(" + competition.getCategory(aPhoto) + ")" + " \n");
         }
         photographsList.setListData(membersData);
         doSummaryField();
      }
   }

   private void doSummaryField()
   {

      Member theMember = (Member) memberList2.getSelectedValue();
      int total = competition.totalEntries(theMember);
      if (total == 0)
      {
         firstfield.setText("This member has no entries");
      }
      else if (total == 1)
      {
         firstfield.setText("This member has one entry ");
      }
      else
      {
         firstfield.setText("This member has " + total + " entries");
      }
   }

   /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      buttonGroup1 = new javax.swing.ButtonGroup();
      jTabbedPane1 = new javax.swing.JTabbedPane();
      jPanel1 = new javax.swing.JPanel();
      jScrollPane1 = new javax.swing.JScrollPane();
      memberList1 = new m256gui.M256JList();
      jScrollPane2 = new javax.swing.JScrollPane();
      categoryList = new m256gui.M256JList();
      jScrollPane4 = new javax.swing.JScrollPane();
      outcomeArea = new javax.swing.JTextArea();
      jButton1 = new javax.swing.JButton();
      titleField = new javax.swing.JTextField();
      jLabel2 = new javax.swing.JLabel();
      jLabel6 = new javax.swing.JLabel();
      jLabel7 = new javax.swing.JLabel();
      jLabel1 = new javax.swing.JLabel();
      jPanel2 = new javax.swing.JPanel();
      jScrollPane3 = new javax.swing.JScrollPane();
      memberList2 = new m256gui.M256JList();
      jScrollPane5 = new javax.swing.JScrollPane();
      photographsList = new m256gui.M256JList();
      jLabel3 = new javax.swing.JLabel();
      jLabel4 = new javax.swing.JLabel();
      jLabel5 = new javax.swing.JLabel();
      firstfield = new javax.swing.JTextField();

      setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
      setTitle("Competition Admin System");

      memberList1.setModel(new javax.swing.AbstractListModel() {
         String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
         public int getSize() { return strings.length; }
         public Object getElementAt(int i) { return strings[i]; }
      });
      memberList1.setSelectionMode(0);
      memberList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
         public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
            memberList1ValueChanged(evt);
         }
      });
      jScrollPane1.setViewportView(memberList1);

      categoryList.setModel(new javax.swing.AbstractListModel() {
         String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
         public int getSize() { return strings.length; }
         public Object getElementAt(int i) { return strings[i]; }
      });
      categoryList.setSelectionMode(0);
      categoryList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
         public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
            categoryListValueChanged(evt);
         }
      });
      jScrollPane2.setViewportView(categoryList);

      outcomeArea.setColumns(20);
      outcomeArea.setRows(5);
      jScrollPane4.setViewportView(outcomeArea);

      jButton1.setText("Record Photograph");
      jButton1.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton1ActionPerformed(evt);
         }
      });

      jLabel2.setText("Title");

      jLabel6.setText("Member");

      jLabel7.setText("Category");

      jLabel1.setText("Outcome");

      javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
      jPanel1.setLayout(jPanel1Layout);
      jPanel1Layout.setHorizontalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel1Layout.createSequentialGroup()
            .addGap(26, 26, 26)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 458, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel1)
               .addGroup(jPanel1Layout.createSequentialGroup()
                  .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                  .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                           .addComponent(titleField, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                           .addComponent(jButton1)))
                     .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42)
                        .addComponent(jLabel2)))))
            .addGap(0, 41, Short.MAX_VALUE))
      );
      jPanel1Layout.setVerticalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel6)
               .addComponent(jLabel7)
               .addComponent(jLabel2))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(jPanel1Layout.createSequentialGroup()
                  .addComponent(titleField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addGap(18, 18, 18)
                  .addComponent(jButton1)
                  .addGap(0, 79, Short.MAX_VALUE))
               .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
               .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
            .addGap(18, 18, 18)
            .addComponent(jLabel1)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(14, 14, 14))
      );

      jTabbedPane1.addTab("Record Photograph", jPanel1);

      memberList2.setModel(new javax.swing.AbstractListModel() {
         String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
         public int getSize() { return strings.length; }
         public Object getElementAt(int i) { return strings[i]; }
      });
      memberList2.setSelectionMode(0);
      memberList2.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
         public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
            memberList2ValueChanged(evt);
         }
      });
      jScrollPane3.setViewportView(memberList2);

      photographsList.setModel(new javax.swing.AbstractListModel() {
         String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
         public int getSize() { return strings.length; }
         public Object getElementAt(int i) { return strings[i]; }
      });
      jScrollPane5.setViewportView(photographsList);

      jLabel3.setText("Member");

      jLabel4.setText("Photographs");

      jLabel5.setText("Total number of entries for this member ");

      javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
      jPanel2.setLayout(jPanel2Layout);
      jPanel2Layout.setHorizontalGroup(
         jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel2Layout.createSequentialGroup()
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                  .addGroup(jPanel2Layout.createSequentialGroup()
                     .addGap(14, 14, 14)
                     .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel3)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                     .addGap(18, 18, 18)
                     .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4)))
                  .addGroup(jPanel2Layout.createSequentialGroup()
                     .addContainerGap()
                     .addComponent(firstfield)))
               .addGroup(jPanel2Layout.createSequentialGroup()
                  .addContainerGap()
                  .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addContainerGap(86, Short.MAX_VALUE))
      );
      jPanel2Layout.setVerticalGroup(
         jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel2Layout.createSequentialGroup()
            .addGap(15, 15, 15)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel3)
               .addComponent(jLabel4))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
               .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)
               .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
            .addGap(27, 27, 27)
            .addComponent(jLabel5)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(firstfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(0, 116, Short.MAX_VALUE))
      );

      jTabbedPane1.addTab("List Photographs", jPanel2);

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 534, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(0, 17, Short.MAX_VALUE))
      );

      pack();
   }// </editor-fold>//GEN-END:initComponents

    private void memberList2ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_memberList2ValueChanged
       doListMembers();
    }//GEN-LAST:event_memberList2ValueChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       doRecordPhotograph();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void categoryListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_categoryListValueChanged
       resetOutcomeArea(); //
    }//GEN-LAST:event_categoryListValueChanged

    private void memberList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_memberList1ValueChanged
       resetOutcomeArea();
    }//GEN-LAST:event_memberList1ValueChanged

   /**
    * @param args the command line arguments
    */
   public static void main(String args[])
   {
      /*
       * Set the Nimbus look and feel
       */
      //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
       * If Nimbus (introduced in Java SE 6) is not available, stay with the
       * default look and feel. For details see
       * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
       */
      try
      {
         for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
         {
            if ("Nimbus".equals(info.getName()))
            {
               javax.swing.UIManager.setLookAndFeel(info.getClassName());
               break;
            }
         }
      }
      catch (ClassNotFoundException ex)
      {
         java.util.logging.Logger.getLogger(CompetitionAdminGUI.class.getName()).log(
               java.util.logging.Level.SEVERE, null, ex);
      }
      catch (InstantiationException ex)
      {
         java.util.logging.Logger.getLogger(CompetitionAdminGUI.class.getName()).log(
               java.util.logging.Level.SEVERE, null, ex);
      }
      catch (IllegalAccessException ex)
      {
         java.util.logging.Logger.getLogger(CompetitionAdminGUI.class.getName()).log(
               java.util.logging.Level.SEVERE, null, ex);
      }
      catch (javax.swing.UnsupportedLookAndFeelException ex)
      {
         java.util.logging.Logger.getLogger(CompetitionAdminGUI.class.getName()).log(
               java.util.logging.Level.SEVERE, null, ex);
      }
      //</editor-fold>

      /*
       * Create and display the form
       */
      java.awt.EventQueue.invokeLater(new Runnable()
      {

         @Override
         public void run()
         {
            try
            {
               new CompetitionAdminGUI().setVisible(true);
            }
            catch (ParseException ex)
            {
               ex.printStackTrace();
            }
         }
      });
   }
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.ButtonGroup buttonGroup1;
   private m256gui.M256JList categoryList;
   private javax.swing.JTextField firstfield;
   private javax.swing.JButton jButton1;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JLabel jLabel3;
   private javax.swing.JLabel jLabel4;
   private javax.swing.JLabel jLabel5;
   private javax.swing.JLabel jLabel6;
   private javax.swing.JLabel jLabel7;
   private javax.swing.JPanel jPanel1;
   private javax.swing.JPanel jPanel2;
   private javax.swing.JScrollPane jScrollPane1;
   private javax.swing.JScrollPane jScrollPane2;
   private javax.swing.JScrollPane jScrollPane3;
   private javax.swing.JScrollPane jScrollPane4;
   private javax.swing.JScrollPane jScrollPane5;
   private javax.swing.JTabbedPane jTabbedPane1;
   private m256gui.M256JList memberList1;
   private m256gui.M256JList memberList2;
   private javax.swing.JTextArea outcomeArea;
   private m256gui.M256JList photographsList;
   private javax.swing.JTextField titleField;
   // End of variables declaration//GEN-END:variables
}
